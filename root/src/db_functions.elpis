
use "container_classes.elpis"
use "db_context.elpis"
use "db_doctor.elpis"

checkDatabaseExistence()

dbContext = instance of DbContext ()
funcCreator = dbContext.exec(
            query: "
                CREATE OR REPLACE FUNCTION createUser (varchar(50), varchar(50), varchar(50), varchar(50), varchar(20), varchar(20))
                RETURNS bigint AS $userId$
                declare
                      userId bigint;
                  BEGIN
                      if (select count(*) from \"users\" where username = $1) = 0 then
                          insert into \"users\" (\"username\", \"password\", \"firstName\", \"lastName\", \"phone\", \"role\")
                             values ($1, $2, $3, $4, $5, $6) returning \"userId\" into userId;
                      else
                          select -1 into userId;
                      end if;
                      return userId;
                  END;
                  $userId$ LANGUAGE plpgsql;
              ")
Pg.closeRead(iterator: funcCreator)
funcCreator = dbContext.exec(
            query: "
                  CREATE OR REPLACE FUNCTION createCenter (bigint, varchar(50), varchar(512), varchar(20), bigint, bigint, bigint)
                  RETURNS bigint AS $centerId$
                  declare
                      centerId bigint;
                  BEGIN
                      if (select count(*) from \"centers\" where \"ownerId\" = $1) > 0 then
                          select -1 into centerId;
                      elsif (select count(*) from \"centers\" where \"title\" = $2) > 0 then
                          select -2 into centerId;
                      else 
                          insert into \"centers\" (\"ownerId\", \"title\", \"address\", \"phone\", \"longitude\", \"latitude\", \"avatarId\")
                             values ($1, $2, $3, $4, $5, $6, $7) returning \"centerId\" into centerId;
                      end if;
                      return centerId;
                  END;
                  $centerId$ LANGUAGE plpgsql;
              ")
Pg.closeRead(iterator: funcCreator)
dbContext.close()

prepareAdmin()